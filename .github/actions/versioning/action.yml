name: Versioning Checks
description: 'Check if the package version has been updated in the __init__.py and setup.py files'

inputs:
  packaging-style:
    description: 'The python packaging style used in the repository (`setup.py` or `pyproject.toml`)'
    default: 'setup.py'
  package-folder:
    description: 'The folder where the package is located'
    default: ''

runs:
  using: composite
  steps:
    - name: Check inputs packaging-style
      shell: bash
      run: |
        if [[ ${{ inputs.packaging-style }} != 'setup.py' && ${{ inputs.packaging-style }} != 'pyproject.toml' ]]; then
          echo "Error: The packaging-style input must be either 'setup.py' or 'pyproject.toml'."
          exit 1
        fi
      
    - name: Check for changed files in the package folder
      shell: bash
      run: |
        # Get the commit hashes for the base and head branches
        BASE_SHA=$(git rev-parse origin/${{ github.base_ref }})
        HEAD_SHA=$(git rev-parse origin/${{ github.head_ref }})

        echo "Base ref: ${{ github.base_ref }}"
        echo "Base SHA: ${BASE_SHA}"
        echo "Head ref: ${{ github.head_ref }}"
        echo "Head SHA: ${HEAD_SHA}"
        echo "HEAD: $(git rev-parse HEAD)"

        # Check if there are changes in the package folder
        if [ -z "${{ inputs.package-folder }}" ]; then
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA './${{ github.event.repository.name }}/')
        else
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA './${{ inputs.package-folder }}/${{ github.event.repository.name }}/')
        fi

        echo "Changed files: $CHANGED_FILES"

    - name: Quit if no changes
      shell: bash
      run: |
        if [[ -n "$CHANGED_FILES" ]];then
          echo "There are no changes in the ${{ github.event.repository.name }} folder"
          exit 0
        fi

    - name: Execute setup.py versioning checks
      if: ${{inputs.packaging-style}} == 'setup.py'
      shell: bash
      run: |
        if [[ -n "$CHANGED_FILES" ]]; then
          echo "------------------------------------------"
          echo "There are changes in the ${{ github.event.repository.name }} folder"
          echo "------------------------------------------"
          echo "Checking __init__.py file..."

          head_init_version=$(git show HEAD:./${{ github.event.repository.name }}/__init__.py | grep -oP '__version__ = "\K[^"]+')
          echo "Head version: ${head_init_version}"

          base_init_version=$(git show ${BASE_SHA}:./${{ github.event.repository.name }}/__init__.py | grep -oP '__version__ = "\K[^"]+')
          echo "Base version: ${base_init_version}"

          if [ "$base_init_version" != "$head_init_version" ]; then
            echo "The __version__ variable has been updated in package init."
          else
            echo "Error: The __version__ variable has not been updated in package init."
            exit 1
          fi

          echo "------------------------------------------"
          echo "Checking setup.py file..."

          head_setup_version=$(git show HEAD:./setup.py | grep -oP 'version="\K[^"]+')
          echo "Head version: ${head_setup_version}"

          base_setup_version=$(git show ${BASE_SHA}:./setup.py | grep -oP 'version="\K[^"]+')
          echo "Base version: ${base_setup_version}"

          if [ "$head_setup_version" != "$base_setup_version" ]; then
            echo "The version variable have both been updated in setup.py."
          else
            echo "Error: The version variable has not been updated in setup.py."
            exit 1
          fi

          echo "------------------------------------------"
          echo "Checking they are equal..."

          if [ "$head_init_version" == "$head_setup_version" ]; then
            echo "The versions are equal."
          else
            echo "Error: The versions are not equal."
            exit 1
          fi
        else
          echo "There are no changes in the ${{ github.event.repository.name }} folder"
          exit 0
        fi


    - name: Execute pyproject.toml versioning checks
      shell: bash
      if: inputs.packaging-style == 'pyproject.toml'
      run: |
        echo "The pyproject.toml versioning checks are not implemented yet."
        exit 1
