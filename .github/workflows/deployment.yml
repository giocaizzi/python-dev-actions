name: Deployment

on:
  workflow_dispatch:

  workflow_call:
    inputs:
      subdir:
        description: "Subdirectory to run the workflow on. Default is the root of the repository"
        type: string
        default: ''
      os:
        description: "Operating system to run on"
        default: 'ubuntu-latest'
        type: string
      python-version:
        description: "Python version to run on"
        default: '3.9'
        type: string
      python-tested-versions:
        description: "Stringfied list of Python versions to test on"
        type: string
        # double quotes outside and single quotes inside
        # for json parsing
        default: "['3.7', '3.8', '3.9', '3.10','3.11','3.12']"
      python-package-type:
        description: "Type of package to test (setup.py or pyproject.toml)"
        default: 'setup.py'
        type: string
      python-build-backend:
        description: "Python build backend to use (setuptools or poetry)"
        default: 'poetry'
        type: string

jobs:
  # Run pre-checks workflow.
  # - lint
  # - versioning (if PR)
  # - documentation-merge-check (if PR)
  pre-checks:
    name: pre-checks_py${{ inputs.python-version }}_${{inputs.os}}
    runs-on: ${{ inputs.os }}
    steps:
      - uses: giocaizzi/python-dev-actions/.github/actions/setup@toml
        with:
          python-version: ${{inputs.python-version}}
          fetch-depth: 0 #required for versioning check
          sdir: ${{inputs.subdir}}
          backend: ${{inputs.python-build-backend}}

      - name: Lint with Flake8
        uses: giocaizzi/python-dev-actions/.github/actions/lint@toml
        with:
          backend: ${{inputs.python-build-backend}}

      # - name: Versioning checks
      #   # it's coded only for pull requests, this avoids if erroneously called on push
      #   # if: github.event_name == 'pull_request'
      #   uses: giocaizzi/python-dev-actions/.github/actions/versioning@main

      # - name: Documentation merge check, if on ubuntu-latest
      #   if: github.event_name == 'pull_request' && inputs.os == 'ubuntu-latest'
      #   uses: giocaizzi/python-dev-actions/.github/actions/documentation-merge-check@main


  # Run Tests workflow on specified OS for a matrix of python versions
  tests:
    needs: pre-checks
    name: tests_py${{ matrix.python-version }}_${{inputs.os}}
    strategy:
      # allow the matrix to not fail completely if one fails
      fail-fast: false
      matrix:
        python-version: ${{fromJson(inputs.python-tested-versions)}}
    runs-on: ${{inputs.os}}
    steps:
      - uses: giocaizzi/python-dev-actions/.github/actions/setup@toml
        with:
          python-version: ${{matrix.python-version}}
          sdir : ${{inputs.subdir}}

      - name: Run tests
        uses: giocaizzi/python-dev-actions/.github/actions/tests@toml

  # # Execute post-deployment actions
  # post-deployment:
  #   name: Open issues from TODOs
  #   needs: "tests"
  #   uses: giocaizzi/python-dev-actions/.github/actions/todo@main


